
from functools import lru_cache

# First solution
total = 4_000_000
sum = 0

@lru_cache(maxsize = 4_000_000)
def sum_even_valued(n):
    '''
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    '''

    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n > 2:
        return sum_even_valued(n-1) + sum_even_valued(n-2)

for n in range(1, 500):
    result = sum_even_valued(n)
    if result <= total:
        if result%2 == 0:
            sum += result

print(f"The sum of the even-valued terms is: ",sum)




# Second solution, less code
def SumEvenFibonacci(limit):
    total, x, y, = 0, 0, 1

    while (y <= limit):
        if y % 2 == 0:
            total += y
        x, y = y, x + y

    return total

print(f"The sum of the even-valued terms is: ", SumEvenFibonacci(4000000))